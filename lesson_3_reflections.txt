1. When would you want to use a remote repository rather than keeping all your work local?

Creating a remote repository would be useful in order to maintain a backup of 
work that is in your local computer, as well as so that other people can view
or collaborate to the work in your repository.

2. Why might you want to always pull changes manually rather than having 
Git automatically stay up-to-date with your remote repository?

If your project is public or simply shared with others, 
other people might be contributing to it on GitHub, so you might want to 
first review any changes before pulling them into your local drive.

3. Describe the differences between forks, clones, and branches. When would you 
use one instead of another?

A branch is a separate version of your file history saved in your repository. You
would use a branch when you want to create a test or different version of a particular
file. You can also later merge two branches so that the new master branch contains
all changes made on both branches (or you can keep two different branches, for 
example, one for a file in english and one for a file in spanish).

A clone is a copy of a repository, either within a local computer or from GitHub to a 
local machine. You can use clone when you just want to make a copy of a repository
that you will then continue to make changes to (and push back to GitHub).

A fork is basically a clone, but where the copy is made from GitHub to GitHub. You would
use a fork instead of a clone where you want to make changes to a repository without 
affecting the original/source repository. The fork creates a copy of that repository
and you can then clone that to your local machine and push changes to it, without
any changes affecting the original repository you forked from. This will also mean your
copied repository in GitHub will be linked to its original source.

4. What is the benefit of having a copy of the last known state of the remote stored
locally?

The benefit of having a copy of the last known state of the remote stored locally is that
 it allows you to know where your local and remote repositories differ, and what changes
 have been made in one repository that may not have been combined into the local one yet,
 and if my local and remote repositories are in our out of sync.

 5. How would you collaborate without using Git or GitHub? What would be easier, 
 and what would be harder?

 Using the recipes example, I would collaborate without Git or GitHub by using a software
 that allows some form or revision and online collaboration, like Google Docs. I could 
 make changes and add comments to notify someone else of the changes I've made. Google
 Docs also would keep a revision history that highlights any changes made to the document
 (and who has made each change). This method would involve sightly less work as I 
 wouldn't need to submit commits or push or pull branches. It would also be a bit more
 accessible as it wouldn't require other that I am collaborating with to know how to 
 use Git/GitHub. Also, with Google Docs we would not need to remember to save our own
 revisions of the file as it is done automatically. However, using this method would 
 also have some drawbacks. A revision history would be kept for every single change made, 
 even if it's not particularly relevant or logical, so if we needed to go back to an
 older version of the file, it would be hard to find which version we need. It could
 also be difficult to find changes to a file if the file is quite big and there are a
 lot of changes made - especially if the other collaborators don't add comments about
 changes they have made. With Git and GitHub, there is a cleaner and more logical
 historical track of changes made. It is also much easier to merge changes done by 
 separate people while ensuring all changes are compatible and make sense.