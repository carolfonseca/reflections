1. What happens when you initialize a repository? Why do you 
need it?
When you initialise a repository, git creates a hidden
directory called .git, where all the commits (aka file 
tracking) will be stored. Git does not commit the current
version of files when you create a repository. You need
the repository so that you can use git on a directory to
track the changes (or versions) of particular files. 

2. How is the staging area different from the working 
directory and the repository? WHat value do you think it 
offers?
The staging area is different from the working directory and
repository because it is not a particular directory that
exists - it is a place to prepare files before making commits.
By having this place "in between" the repository and the
working directory, you have a bit more freedom around how you 
want to make changes to the repository.

3.What are some situations when branches would be helpful in
keeping your history organised? How would branches help?

Branches would be helpful by keeping different versions
of the same code (eg. a work in progress or two versions
in different languages) separate, so you can more easily
find changes that relate to each particular version. 
This would also help in debugging the code as the changes
are kept separate.

4. How do the diagrams help you visualise the branch structure?

The diagrams help understand the branch structure by showing
what commits have occured in each branch, where each
branch is at, how the branches may differ, and also what
the parent of each commit is.

5. What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

The result of merging two branches together is that you
combine all the changes in the code from both different
branches into the one branch. This way if two people
were working on different features for a product, for
example, they would get to do it separately without
affecting or breaking each other's code, and then once
they each had their feature working, a merge would
combine both features into the one place. The diagram
represents the merge and different branches in a way
that allows you to trace back the parent of each
commit.

6. What are the pros and cons of Git's automatic merging
vs. always doing merges manually?

The main pro of doing automatic merges through Git is that
it would save you a lot of time in figuring out what changes
were made to a file, and how to combine the two files. 
Another benefit is that Git also detects conflicts in merges
where the same bit of code may have been changed in different
ways, so that it prompts the user to check which change to 
keep. The benefit or merging something manually is that you
have complete control and knowledge of what changes have been
made and you can ensure that they are all compatible and will
work together - but this would be very time consuming.